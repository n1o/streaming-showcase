/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.mbarak.showcase;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Event2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6201905917813372290L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event2\",\"namespace\":\"io.mbarak.showcase\",\"fields\":[{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"userValue3\",\"type\":\"double\"},{\"name\":\"userValue4\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Event2> ENCODER =
      new BinaryMessageEncoder<Event2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Event2> DECODER =
      new BinaryMessageDecoder<Event2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Event2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Event2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Event2>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Event2 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Event2 from a ByteBuffer. */
  public static Event2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence userId;
  @Deprecated public double userValue3;
  @Deprecated public int userValue4;
  @Deprecated public long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Event2() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param userValue3 The new value for userValue3
   * @param userValue4 The new value for userValue4
   * @param timestamp The new value for timestamp
   */
  public Event2(java.lang.CharSequence userId, java.lang.Double userValue3, java.lang.Integer userValue4, java.lang.Long timestamp) {
    this.userId = userId;
    this.userValue3 = userValue3;
    this.userValue4 = userValue4;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return userValue3;
    case 2: return userValue4;
    case 3: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.CharSequence)value$; break;
    case 1: userValue3 = (java.lang.Double)value$; break;
    case 2: userValue4 = (java.lang.Integer)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.CharSequence getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'userValue3' field.
   * @return The value of the 'userValue3' field.
   */
  public java.lang.Double getUserValue3() {
    return userValue3;
  }

  /**
   * Sets the value of the 'userValue3' field.
   * @param value the value to set.
   */
  public void setUserValue3(java.lang.Double value) {
    this.userValue3 = value;
  }

  /**
   * Gets the value of the 'userValue4' field.
   * @return The value of the 'userValue4' field.
   */
  public java.lang.Integer getUserValue4() {
    return userValue4;
  }

  /**
   * Sets the value of the 'userValue4' field.
   * @param value the value to set.
   */
  public void setUserValue4(java.lang.Integer value) {
    this.userValue4 = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new Event2 RecordBuilder.
   * @return A new Event2 RecordBuilder
   */
  public static io.mbarak.showcase.Event2.Builder newBuilder() {
    return new io.mbarak.showcase.Event2.Builder();
  }

  /**
   * Creates a new Event2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Event2 RecordBuilder
   */
  public static io.mbarak.showcase.Event2.Builder newBuilder(io.mbarak.showcase.Event2.Builder other) {
    return new io.mbarak.showcase.Event2.Builder(other);
  }

  /**
   * Creates a new Event2 RecordBuilder by copying an existing Event2 instance.
   * @param other The existing instance to copy.
   * @return A new Event2 RecordBuilder
   */
  public static io.mbarak.showcase.Event2.Builder newBuilder(io.mbarak.showcase.Event2 other) {
    return new io.mbarak.showcase.Event2.Builder(other);
  }

  /**
   * RecordBuilder for Event2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event2>
    implements org.apache.avro.data.RecordBuilder<Event2> {

    private java.lang.CharSequence userId;
    private double userValue3;
    private int userValue4;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.mbarak.showcase.Event2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userValue3)) {
        this.userValue3 = data().deepCopy(fields()[1].schema(), other.userValue3);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userValue4)) {
        this.userValue4 = data().deepCopy(fields()[2].schema(), other.userValue4);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Event2 instance
     * @param other The existing instance to copy.
     */
    private Builder(io.mbarak.showcase.Event2 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userValue3)) {
        this.userValue3 = data().deepCopy(fields()[1].schema(), other.userValue3);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userValue4)) {
        this.userValue4 = data().deepCopy(fields()[2].schema(), other.userValue4);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public io.mbarak.showcase.Event2.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public io.mbarak.showcase.Event2.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userValue3' field.
      * @return The value.
      */
    public java.lang.Double getUserValue3() {
      return userValue3;
    }

    /**
      * Sets the value of the 'userValue3' field.
      * @param value The value of 'userValue3'.
      * @return This builder.
      */
    public io.mbarak.showcase.Event2.Builder setUserValue3(double value) {
      validate(fields()[1], value);
      this.userValue3 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userValue3' field has been set.
      * @return True if the 'userValue3' field has been set, false otherwise.
      */
    public boolean hasUserValue3() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userValue3' field.
      * @return This builder.
      */
    public io.mbarak.showcase.Event2.Builder clearUserValue3() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userValue4' field.
      * @return The value.
      */
    public java.lang.Integer getUserValue4() {
      return userValue4;
    }

    /**
      * Sets the value of the 'userValue4' field.
      * @param value The value of 'userValue4'.
      * @return This builder.
      */
    public io.mbarak.showcase.Event2.Builder setUserValue4(int value) {
      validate(fields()[2], value);
      this.userValue4 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userValue4' field has been set.
      * @return True if the 'userValue4' field has been set, false otherwise.
      */
    public boolean hasUserValue4() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userValue4' field.
      * @return This builder.
      */
    public io.mbarak.showcase.Event2.Builder clearUserValue4() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.mbarak.showcase.Event2.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.mbarak.showcase.Event2.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Event2 build() {
      try {
        Event2 record = new Event2();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.userValue3 = fieldSetFlags()[1] ? this.userValue3 : (java.lang.Double) defaultValue(fields()[1]);
        record.userValue4 = fieldSetFlags()[2] ? this.userValue4 : (java.lang.Integer) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Event2>
    WRITER$ = (org.apache.avro.io.DatumWriter<Event2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Event2>
    READER$ = (org.apache.avro.io.DatumReader<Event2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
